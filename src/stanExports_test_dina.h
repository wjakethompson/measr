// Generated by rstantools.  Do not edit by hand.

/*
    measr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    measr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with measr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_test_dina_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 119> locations_array__ =
  {" (found before start of program)",
  " (in 'test_dina', line 14, column 2 to column 16)",
  " (in 'test_dina', line 16, column 2 to column 38)",
  " (in 'test_dina', line 17, column 2 to column 39)",
  " (in 'test_dina', line 20, column 2 to column 29)",
  " (in 'test_dina', line 21, column 2 to column 17)",
  " (in 'test_dina', line 24, column 6 to column 71)",
  " (in 'test_dina', line 23, column 19 to line 25, column 5)",
  " (in 'test_dina', line 23, column 4 to line 25, column 5)",
  " (in 'test_dina', line 22, column 17 to line 26, column 3)",
  " (in 'test_dina', line 22, column 2 to line 26, column 3)",
  " (in 'test_dina', line 30, column 2 to column 35)",
  " (in 'test_dina', line 31, column 2 to column 25)",
  " (in 'test_dina', line 32, column 2 to column 24)",
  " (in 'test_dina', line 33, column 2 to column 25)",
  " (in 'test_dina', line 34, column 2 to column 24)",
  " (in 'test_dina', line 35, column 2 to column 25)",
  " (in 'test_dina', line 36, column 2 to column 24)",
  " (in 'test_dina', line 37, column 2 to column 25)",
  " (in 'test_dina', line 38, column 2 to column 24)",
  " (in 'test_dina', line 39, column 2 to column 25)",
  " (in 'test_dina', line 40, column 2 to column 24)",
  " (in 'test_dina', line 41, column 2 to column 25)",
  " (in 'test_dina', line 42, column 2 to column 24)",
  " (in 'test_dina', line 43, column 2 to column 25)",
  " (in 'test_dina', line 44, column 2 to column 24)",
  " (in 'test_dina', line 45, column 2 to column 25)",
  " (in 'test_dina', line 46, column 2 to column 24)",
  " (in 'test_dina', line 47, column 2 to column 25)",
  " (in 'test_dina', line 48, column 2 to column 24)",
  " (in 'test_dina', line 49, column 2 to column 26)",
  " (in 'test_dina', line 50, column 2 to column 25)",
  " (in 'test_dina', line 51, column 2 to column 26)",
  " (in 'test_dina', line 52, column 2 to column 25)",
  " (in 'test_dina', line 53, column 2 to column 26)",
  " (in 'test_dina', line 54, column 2 to column 25)",
  " (in 'test_dina', line 55, column 2 to column 26)",
  " (in 'test_dina', line 56, column 2 to column 25)",
  " (in 'test_dina', line 57, column 2 to column 26)",
  " (in 'test_dina', line 58, column 2 to column 25)",
  " (in 'test_dina', line 59, column 2 to column 26)",
  " (in 'test_dina', line 60, column 2 to column 25)",
  " (in 'test_dina', line 61, column 2 to column 26)",
  " (in 'test_dina', line 62, column 2 to column 25)",
  " (in 'test_dina', line 63, column 2 to column 26)",
  " (in 'test_dina', line 64, column 2 to column 25)",
  " (in 'test_dina', line 65, column 2 to column 26)",
  " (in 'test_dina', line 66, column 2 to column 25)",
  " (in 'test_dina', line 67, column 2 to column 26)",
  " (in 'test_dina', line 68, column 2 to column 25)",
  " (in 'test_dina', line 69, column 2 to column 26)",
  " (in 'test_dina', line 70, column 2 to column 25)",
  " (in 'test_dina', line 71, column 2 to column 26)",
  " (in 'test_dina', line 72, column 2 to column 25)",
  " (in 'test_dina', line 73, column 2 to column 26)",
  " (in 'test_dina', line 74, column 2 to column 25)",
  " (in 'test_dina', line 75, column 2 to column 26)",
  " (in 'test_dina', line 76, column 2 to column 25)",
  " (in 'test_dina', line 77, column 2 to column 26)",
  " (in 'test_dina', line 78, column 2 to column 25)",
  " (in 'test_dina', line 79, column 2 to column 26)",
  " (in 'test_dina', line 80, column 2 to column 25)",
  " (in 'test_dina', line 81, column 2 to column 26)",
  " (in 'test_dina', line 82, column 2 to column 25)",
  " (in 'test_dina', line 83, column 2 to column 26)",
  " (in 'test_dina', line 84, column 2 to column 25)",
  " (in 'test_dina', line 85, column 2 to column 26)",
  " (in 'test_dina', line 86, column 2 to column 25)",
  " (in 'test_dina', line 87, column 2 to column 26)",
  " (in 'test_dina', line 88, column 2 to column 25)",
  " (in 'test_dina', line 89, column 2 to column 26)",
  " (in 'test_dina', line 90, column 2 to column 25)",
  " (in 'test_dina', line 91, column 2 to column 26)",
  " (in 'test_dina', line 92, column 2 to column 25)",
  " (in 'test_dina', line 93, column 2 to column 26)",
  " (in 'test_dina', line 94, column 2 to column 25)",
  " (in 'test_dina', line 95, column 2 to column 26)",
  " (in 'test_dina', line 96, column 2 to column 25)",
  " (in 'test_dina', line 97, column 2 to column 26)",
  " (in 'test_dina', line 98, column 2 to column 25)",
  " (in 'test_dina', line 99, column 2 to column 26)",
  " (in 'test_dina', line 100, column 2 to column 25)",
  " (in 'test_dina', line 103, column 15 to column 16)",
  " (in 'test_dina', line 103, column 4 to column 21)",
  " (in 'test_dina', line 105, column 12 to column 18)",
  " (in 'test_dina', line 105, column 6 to column 35)",
  " (in 'test_dina', line 107, column 8 to column 37)",
  " (in 'test_dina', line 108, column 8 to line 109, column 68)",
  " (in 'test_dina', line 106, column 26 to line 110, column 7)",
  " (in 'test_dina', line 106, column 6 to line 110, column 7)",
  " (in 'test_dina', line 111, column 6 to column 41)",
  " (in 'test_dina', line 104, column 19 to line 112, column 5)",
  " (in 'test_dina', line 104, column 4 to line 112, column 5)",
  " (in 'test_dina', line 113, column 4 to column 30)",
  " (in 'test_dina', line 102, column 17 to line 114, column 3)",
  " (in 'test_dina', line 102, column 2 to line 114, column 3)",
  " (in 'test_dina', line 2, column 2 to column 17)",
  " (in 'test_dina', line 3, column 2 to column 17)",
  " (in 'test_dina', line 4, column 2 to column 17)",
  " (in 'test_dina', line 5, column 2 to column 17)",
  " (in 'test_dina', line 6, column 8 to column 9)",
  " (in 'test_dina', line 6, column 2 to column 35)",
  " (in 'test_dina', line 7, column 8 to column 9)",
  " (in 'test_dina', line 7, column 2 to column 35)",
  " (in 'test_dina', line 8, column 8 to column 9)",
  " (in 'test_dina', line 8, column 2 to column 34)",
  " (in 'test_dina', line 9, column 8 to column 9)",
  " (in 'test_dina', line 9, column 2 to column 38)",
  " (in 'test_dina', line 10, column 8 to column 9)",
  " (in 'test_dina', line 10, column 2 to column 36)",
  " (in 'test_dina', line 11, column 9 to column 10)",
  " (in 'test_dina', line 11, column 11 to column 12)",
  " (in 'test_dina', line 11, column 2 to column 17)",
  " (in 'test_dina', line 14, column 10 to column 11)",
  " (in 'test_dina', line 16, column 8 to column 9)",
  " (in 'test_dina', line 17, column 8 to column 9)",
  " (in 'test_dina', line 20, column 9 to column 10)",
  " (in 'test_dina', line 21, column 9 to column 10)",
  " (in 'test_dina', line 21, column 11 to column 12)"};
#include <stan_meta_header.hpp>
class model_test_dina final : public model_base_crtp<model_test_dina> {
private:
  int I;
  int R;
  int N;
  int C;
  std::vector<int> ii;
  std::vector<int> rr;
  std::vector<int> y;
  std::vector<int> start;
  std::vector<int> num;
  Eigen::Matrix<double,-1,-1> Xi_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xi{nullptr, 0, 0};
public:
  ~model_test_dina() {}
  model_test_dina(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_test_dina_namespace::model_test_dina";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 96;
      context__.validate_dims("data initialization", "I", "int",
        std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      current_statement__ = 96;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "I", I, 1);
      current_statement__ = 97;
      context__.validate_dims("data initialization", "R", "int",
        std::vector<size_t>{});
      R = std::numeric_limits<int>::min();
      current_statement__ = 97;
      R = context__.vals_i("R")[(1 - 1)];
      current_statement__ = 97;
      stan::math::check_greater_or_equal(function__, "R", R, 1);
      current_statement__ = 98;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 98;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 98;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 99;
      context__.validate_dims("data initialization", "C", "int",
        std::vector<size_t>{});
      C = std::numeric_limits<int>::min();
      current_statement__ = 99;
      C = context__.vals_i("C")[(1 - 1)];
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__, "C", C, 1);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("ii", "N", N);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "ii", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      ii = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 101;
      ii = context__.vals_i("ii");
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__, "ii", ii, 1);
      current_statement__ = 101;
      stan::math::check_less_or_equal(function__, "ii", ii, I);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("rr", "N", N);
      current_statement__ = 103;
      context__.validate_dims("data initialization", "rr", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      rr = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 103;
      rr = context__.vals_i("rr");
      current_statement__ = 103;
      stan::math::check_greater_or_equal(function__, "rr", rr, 1);
      current_statement__ = 103;
      stan::math::check_less_or_equal(function__, "rr", rr, R);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 105;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 105;
      y = context__.vals_i("y");
      current_statement__ = 105;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 105;
      stan::math::check_less_or_equal(function__, "y", y, 1);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("start", "R", R);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "start", "int",
        std::vector<size_t>{static_cast<size_t>(R)});
      start = std::vector<int>(R, std::numeric_limits<int>::min());
      current_statement__ = 107;
      start = context__.vals_i("start");
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "start", start, 1);
      current_statement__ = 107;
      stan::math::check_less_or_equal(function__, "start", start, N);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("num", "R", R);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "num", "int",
        std::vector<size_t>{static_cast<size_t>(R)});
      num = std::vector<int>(R, std::numeric_limits<int>::min());
      current_statement__ = 109;
      num = context__.vals_i("num");
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "num", num, 1);
      current_statement__ = 109;
      stan::math::check_less_or_equal(function__, "num", num, I);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("Xi", "I", I);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("Xi", "C", C);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "Xi", "double",
        std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(C)});
      Xi_data__ = Eigen::Matrix<double,-1,-1>::Constant(I, C,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Xi) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xi_data__.data(), I,
        C);
      {
        std::vector<local_scalar_t__> Xi_flat__;
        current_statement__ = 112;
        Xi_flat__ = context__.vals_r("Xi");
        current_statement__ = 112;
        pos__ = 1;
        current_statement__ = 112;
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          current_statement__ = 112;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 112;
            stan::model::assign(Xi, Xi_flat__[(pos__ - 1)],
              "assigning variable Xi", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 112;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 113;
      stan::math::validate_positive_index("Vc", "C", C);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("slip", "I", I);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("guess", "I", I);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("log_Vc", "C", C);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("pi", "I", I);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("pi", "C", C);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (C - 1) + I + I;
  }
  inline std::string model_name() const final {
    return "model_test_dina";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_test_dina_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> Vc =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
      current_statement__ = 1;
      Vc = in__.template read_constrain_simplex<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, C);
      std::vector<local_scalar_t__> slip =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 2;
      slip = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
               jacobian__>(0, 1, lp__, I);
      std::vector<local_scalar_t__> guess =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 3;
      guess = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(0, 1, lp__, I);
      Eigen::Matrix<local_scalar_t__,-1,1> log_Vc =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(log_Vc, stan::math::log(Vc),
        "assigning variable log_Vc");
      Eigen::Matrix<local_scalar_t__,-1,-1> pi =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(I, C, DUMMY_VAR__);
      current_statement__ = 10;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 8;
        for (int c = 1; c <= C; ++c) {
          current_statement__ = 6;
          stan::model::assign(pi,
            (stan::math::pow((1 -
               stan::model::rvalue(slip, "slip", stan::model::index_uni(i))),
               stan::model::rvalue(Xi, "Xi", stan::model::index_uni(i),
                 stan::model::index_uni(c))) *
            stan::math::pow(
              stan::model::rvalue(guess, "guess", stan::model::index_uni(i)),
              (1 -
              stan::model::rvalue(Xi, "Xi", stan::model::index_uni(i),
                stan::model::index_uni(c))))), "assigning variable pi",
            stan::model::index_uni(i), stan::model::index_uni(c));
        }
      }
      {
        current_statement__ = 11;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(Vc,
                         stan::math::rep_vector(1, C)));
        current_statement__ = 12;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(1)), 5, 25));
        current_statement__ = 13;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(1)), 5, 25));
        current_statement__ = 14;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(2)), 5, 25));
        current_statement__ = 15;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(2)), 5, 25));
        current_statement__ = 16;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(3)), 5, 25));
        current_statement__ = 17;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(3)), 5, 25));
        current_statement__ = 18;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(4)), 5, 25));
        current_statement__ = 19;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(4)), 5, 25));
        current_statement__ = 20;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(5)), 5, 25));
        current_statement__ = 21;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(5)), 5, 25));
        current_statement__ = 22;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(6)), 5, 25));
        current_statement__ = 23;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(6)), 5, 25));
        current_statement__ = 24;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(7)), 5, 25));
        current_statement__ = 25;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(7)), 5, 25));
        current_statement__ = 26;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(8)), 5, 25));
        current_statement__ = 27;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(8)), 5, 25));
        current_statement__ = 28;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(9)), 5, 25));
        current_statement__ = 29;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(9)), 5, 25));
        current_statement__ = 30;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(10)), 5, 25));
        current_statement__ = 31;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(10)), 5, 25));
        current_statement__ = 32;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(11)), 5, 25));
        current_statement__ = 33;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(11)), 5, 25));
        current_statement__ = 34;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(12)), 5, 25));
        current_statement__ = 35;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(12)), 5, 25));
        current_statement__ = 36;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(13)), 5, 25));
        current_statement__ = 37;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(13)), 5, 25));
        current_statement__ = 38;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(14)), 5, 25));
        current_statement__ = 39;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(14)), 5, 25));
        current_statement__ = 40;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(15)), 5, 25));
        current_statement__ = 41;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(15)), 5, 25));
        current_statement__ = 42;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(16)), 5, 25));
        current_statement__ = 43;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(16)), 5, 25));
        current_statement__ = 44;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(17)), 5, 25));
        current_statement__ = 45;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(17)), 5, 25));
        current_statement__ = 46;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(18)), 5, 25));
        current_statement__ = 47;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(18)), 5, 25));
        current_statement__ = 48;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(19)), 5, 25));
        current_statement__ = 49;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(19)), 5, 25));
        current_statement__ = 50;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(20)), 5, 25));
        current_statement__ = 51;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(20)), 5, 25));
        current_statement__ = 52;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(21)), 5, 25));
        current_statement__ = 53;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(21)), 5, 25));
        current_statement__ = 54;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(22)), 5, 25));
        current_statement__ = 55;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(22)), 5, 25));
        current_statement__ = 56;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(23)), 5, 25));
        current_statement__ = 57;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(23)), 5, 25));
        current_statement__ = 58;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(24)), 5, 25));
        current_statement__ = 59;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(24)), 5, 25));
        current_statement__ = 60;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(25)), 5, 25));
        current_statement__ = 61;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(25)), 5, 25));
        current_statement__ = 62;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(26)), 5, 25));
        current_statement__ = 63;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(26)), 5, 25));
        current_statement__ = 64;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(27)), 5, 25));
        current_statement__ = 65;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(27)), 5, 25));
        current_statement__ = 66;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(28)), 5, 25));
        current_statement__ = 67;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(28)), 5, 25));
        current_statement__ = 68;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(29)), 5, 25));
        current_statement__ = 69;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(29)), 5, 25));
        current_statement__ = 70;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(30)), 5, 25));
        current_statement__ = 71;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(30)), 5, 25));
        current_statement__ = 72;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(31)), 5, 25));
        current_statement__ = 73;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(31)), 5, 25));
        current_statement__ = 74;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(32)), 5, 25));
        current_statement__ = 75;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(32)), 5, 25));
        current_statement__ = 76;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(33)), 5, 25));
        current_statement__ = 77;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(33)), 5, 25));
        current_statement__ = 78;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(34)), 5, 25));
        current_statement__ = 79;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(34)), 5, 25));
        current_statement__ = 80;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(guess, "guess",
                           stan::model::index_uni(35)), 5, 25));
        current_statement__ = 81;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(
                         stan::model::rvalue(slip, "slip",
                           stan::model::index_uni(35)), 5, 25));
        current_statement__ = 95;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 82;
          stan::math::validate_non_negative_index("ps", "C", C);
          Eigen::Matrix<local_scalar_t__,1,-1> ps =
            Eigen::Matrix<local_scalar_t__,1,-1>::Constant(C, DUMMY_VAR__);
          current_statement__ = 92;
          for (int c = 1; c <= C; ++c) {
            current_statement__ = 84;
            stan::math::validate_non_negative_index("log_items", "num[r]",
              stan::model::rvalue(num, "num", stan::model::index_uni(r)));
            std::vector<local_scalar_t__> log_items =
              std::vector<local_scalar_t__>(stan::model::rvalue(num, "num",
                                              stan::model::index_uni(r)),
                DUMMY_VAR__);
            current_statement__ = 89;
            for (int m = 1; m <=
                 stan::model::rvalue(num, "num", stan::model::index_uni(r)); ++m) {
              int i = std::numeric_limits<int>::min();
              current_statement__ = 86;
              i = stan::model::rvalue(ii, "ii",
                    stan::model::index_uni(
                      ((stan::model::rvalue(start, "start",
                          stan::model::index_uni(r)) + m) - 1)));
              current_statement__ = 87;
              stan::model::assign(log_items,
                ((stan::model::rvalue(y, "y",
                    stan::model::index_uni(
                      ((stan::model::rvalue(start, "start",
                          stan::model::index_uni(r)) + m) - 1))) *
                stan::math::log(
                  stan::model::rvalue(pi, "pi", stan::model::index_uni(i),
                    stan::model::index_uni(c)))) + ((1 -
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    ((stan::model::rvalue(start, "start",
                        stan::model::index_uni(r)) + m) - 1)))) *
                stan::math::log((1 -
                  stan::model::rvalue(pi, "pi", stan::model::index_uni(i),
                    stan::model::index_uni(c)))))),
                "assigning variable log_items", stan::model::index_uni(m));
            }
            current_statement__ = 90;
            stan::model::assign(ps,
              (stan::model::rvalue(log_Vc, "log_Vc",
                 stan::model::index_uni(c)) + stan::math::sum(log_items)),
              "assigning variable ps", stan::model::index_uni(c));
          }
          current_statement__ = 93;
          lp_accum__.add(stan::math::log_sum_exp(ps));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_test_dina_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> Vc =
        Eigen::Matrix<double,-1,1>::Constant(C,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      Vc = in__.template read_constrain_simplex<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, C);
      std::vector<double> slip =
        std::vector<double>(I, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      slip = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
               jacobian__>(0, 1, lp__, I);
      std::vector<double> guess =
        std::vector<double>(I, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      guess = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(0, 1, lp__, I);
      Eigen::Matrix<double,-1,1> log_Vc =
        Eigen::Matrix<double,-1,1>::Constant(C,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> pi =
        Eigen::Matrix<double,-1,-1>::Constant(I, C,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(Vc);
      out__.write(slip);
      out__.write(guess);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 4;
      stan::model::assign(log_Vc, stan::math::log(Vc),
        "assigning variable log_Vc");
      current_statement__ = 10;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 8;
        for (int c = 1; c <= C; ++c) {
          current_statement__ = 6;
          stan::model::assign(pi,
            (stan::math::pow((1 -
               stan::model::rvalue(slip, "slip", stan::model::index_uni(i))),
               stan::model::rvalue(Xi, "Xi", stan::model::index_uni(i),
                 stan::model::index_uni(c))) *
            stan::math::pow(
              stan::model::rvalue(guess, "guess", stan::model::index_uni(i)),
              (1 -
              stan::model::rvalue(Xi, "Xi", stan::model::index_uni(i),
                stan::model::index_uni(c))))), "assigning variable pi",
            stan::model::index_uni(i), stan::model::index_uni(c));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(log_Vc);
        out__.write(pi);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> Vc =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(Vc,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(C),
        "assigning variable Vc");
      out__.write_free_simplex(Vc);
      std::vector<local_scalar_t__> slip =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(slip, in__.read<std::vector<local_scalar_t__>>(I),
        "assigning variable slip");
      out__.write_free_lub(0, 1, slip);
      std::vector<local_scalar_t__> guess =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(guess, in__.read<std::vector<local_scalar_t__>>(I),
        "assigning variable guess");
      out__.write_free_lub(0, 1, guess);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "Vc", "double",
        std::vector<size_t>{static_cast<size_t>(C)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "slip", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "guess", "double",
        std::vector<size_t>{static_cast<size_t>(I)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> Vc =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Vc_flat__;
        current_statement__ = 1;
        Vc_flat__ = context__.vals_r("Vc");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(Vc, Vc_flat__[(pos__ - 1)],
            "assigning variable Vc", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(Vc);
      std::vector<local_scalar_t__> slip =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 2;
      slip = context__.vals_r("slip");
      out__.write_free_lub(0, 1, slip);
      std::vector<local_scalar_t__> guess =
        std::vector<local_scalar_t__>(I, DUMMY_VAR__);
      current_statement__ = 3;
      guess = context__.vals_r("guess");
      out__.write_free_lub(0, 1, guess);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"Vc", "slip", "guess"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"log_Vc", "pi"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(C)},
                std::vector<size_t>{static_cast<size_t>(I)},
                std::vector<size_t>{static_cast<size_t>(I)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(C)},
             std::vector<size_t>{static_cast<size_t>(I),
               static_cast<size_t>(C)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      param_names__.emplace_back(std::string() + "Vc" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      param_names__.emplace_back(std::string() + "slip" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      param_names__.emplace_back(std::string() + "guess" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_Vc" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          param_names__.emplace_back(std::string() + "pi" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= (C - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "Vc" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      param_names__.emplace_back(std::string() + "slip" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
      param_names__.emplace_back(std::string() + "guess" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_Vc" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          param_names__.emplace_back(std::string() + "pi" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"Vc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"slip\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"guess\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_Vc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"Vc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((C -1)) + "},\"block\":\"parameters\"},{\"name\":\"slip\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"guess\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_Vc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((C + I) + I);
    const size_t num_transformed = emit_transformed_parameters * ((C + (I *
      C)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((C + I) + I);
    const size_t num_transformed = emit_transformed_parameters * ((C + (I *
      C)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_test_dina_namespace::model_test_dina;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_test_dina_namespace::profiles__;
}
#endif
#endif
